{"remainingRequest":"/Users/marquisdong/Desktop/认证证书/test_websocket/ChattingRoom/ChattingRoom/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/marquisdong/Desktop/认证证书/test_websocket/ChattingRoom/ChattingRoom/client/src/components/ChatRoom.vue?vue&type=style&index=0&id=56c7db03&scoped=true&lang=css&","dependencies":[{"path":"/Users/marquisdong/Desktop/认证证书/test_websocket/ChattingRoom/ChattingRoom/client/src/components/ChatRoom.vue","mtime":1640491744646},{"path":"/Users/marquisdong/Desktop/认证证书/test_websocket/ChattingRoom/ChattingRoom/client/node_modules/css-loader/dist/cjs.js","mtime":1640492344599},{"path":"/Users/marquisdong/Desktop/认证证书/test_websocket/ChattingRoom/ChattingRoom/client/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1640492340862},{"path":"/Users/marquisdong/Desktop/认证证书/test_websocket/ChattingRoom/ChattingRoom/client/node_modules/postcss-loader/src/index.js","mtime":1640492341866},{"path":"/Users/marquisdong/Desktop/认证证书/test_websocket/ChattingRoom/ChattingRoom/client/node_modules/cache-loader/dist/cjs.js","mtime":1640492345169},{"path":"/Users/marquisdong/Desktop/认证证书/test_websocket/ChattingRoom/ChattingRoom/client/node_modules/vue-loader/lib/index.js","mtime":1640492340427}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgo+Pj4gLmVsLXRleHRhcmVhX19pbm5lciB7CiAgICAgICAgaGVpZ2h0OiAxMDAlOwogICAgfQo="},{"version":3,"sources":["ChatRoom.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsIA;AACA;AACA","file":"ChatRoom.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <el-container style=\"height: 100%;\">\n        <el-header height=\"120px\" style=\"background-color: peachpuff; display: grid\">\n            <el-row :gutter=\"20\" type=\"flex\" justify=\"space-around\" align=\"middle\">\n                <el-col :span=\"6\" :offset=\"0\" style=\"font-size: xx-large;\">Chatting Room</el-col>\n                <el-col :span=\"6\" :offset=\"12\" style=\"font-size: xx-large\">Nickname：{{ nickname }}</el-col>\n            </el-row>\n        </el-header>\n        <el-main style=\"border: 1px; border-radius: 2px;\">\n            <el-input\n                    type=\"textarea\"\n                    readonly\n                    v-model=\"messages\"\n                    style=\"height: 100%;\"\n            ></el-input>\n        </el-main>\n        <el-footer height=\"240px\" style=\"border: 1px; border-radius: 4px; box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1); padding: 5px;\">\n            <el-input\n                    type=\"textarea\"\n                    :rows=\"5\"\n                    placeholder=\"请输入消息内容\"\n                    v-model=\"message\"\n                    style=\"border-radius: 2px;\"\n            ></el-input>\n            <el-row :gutter=\"20\" type=\"flex\" justify=\"end\" align=\"middle\" style=\"padding: 10px;\">\n                <el-button type=\"primary\" size=\"medium\" @click=\"send()\" v-if=\"nickname !== ''\">发送</el-button>\n                <el-button type=\"primary\" size=\"medium\" @click=\"disconnect()\" v-if=\"nickname !== ''\">退出聊天</el-button>\n                <el-button type=\"primary\" size=\"medium\" @click=\"join()\" v-if=\"nickname === ''\">加入聊天</el-button>\n            </el-row>\n        </el-footer>\n    </el-container>\n</template>\n\n<script>\n    import {Notification} from 'element-ui';\n    let base_url = 'ws://127.0.0.1:8081/ws';\n\n    export default {\n        name: 'ChatRoom',\n        data(){\n            return {\n                nickname: '',\n                message: '',\n                messages: '',\n                socket: null,\n            }\n        },\n        methods: {\n            send() {\n                let info = this.nickname + '：' + this.message + '\\n';\n                let data = {\n                    user: this.nickname,\n                    message: this.message\n                };\n                this.socket.send(JSON.stringify(data));\n                this.messages += info;\n                this.message = '';\n            },\n            join() {\n                this.$prompt('请输入昵称', '提示', {\n                    confirmButtonText: '确定',\n                    inputPlaceholder: '请输入昵称',\n                    inputErrorMessage: '昵称不能为空',\n                    inputValidator: function ($event) {\n                    return $event.length > 0\n                    }\n                }).then(({ value }) => {\n                    this.nickname = value;\n                //    发起 websocket 连接\n                    this.createWebSocket();\n                }).catch(() => {\n                    console.log('取消输入')\n                })\n            },\n            disconnect() {\n                if (this.socket !== undefined && this.socket !== null) {\n                    this.socket.close();\n                }\n                this.socket = null;\n                this.nickname = '';\n            },\n            leaving($event) {\n                console.log($event);\n                console.log(this.socket);\n                if (this.socket !== undefined && this.socket !== null) {\n                    this.socket.close();\n                }\n            },\n            createWebSocket() {\n                if (this.socket === null) {\n                    this.socket = new WebSocket(base_url)\n                }\n\n                this.socket.onopen = (event) => {\n                    console.log(event);\n                    console.log('connected');\n                    Notification.success('连接已建立');\n                //    初次建立连接，发送昵称\n                    let data = {user: this.nickname};\n                    this.socket.send(JSON.stringify(data));\n                };\n\n                this.socket.onmessage = (event) => {\n                    console.log(event);\n                    let data = JSON.parse(event.data)\n                    let info = data.user + '：' + data.message + '\\n';\n                    Notification.info(info);\n                    //    消息内容处理\n                    this.messages += info\n                };\n\n                this.socket.onerror = (event) => {\n                    console.log(event);\n                    console.log('error');\n                    Notification.error('服务端运行发生异常');\n                };\n\n                this.socket.onclose = (event) => {\n                    console.log(event);\n                    console.log('close');\n                    Notification.info('服务端关闭连接');\n                    this.nickname = '';\n                    this.socket = null;\n                };\n            },\n        },\n        created() {\n            window.addEventListener('beforeunload', this.leaving);\n        }\n    }\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n>>> .el-textarea__inner {\n        height: 100%;\n    }\n</style>\n"]}]}